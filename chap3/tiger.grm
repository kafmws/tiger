%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

#define YYDEBUG 1

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE

%start program

%left lowPrec
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%left IFTHEN
%left ELSE

%%

program     : exp
            ;

exp         : valExp              %prec lowPrec
            | stm                 %prec lowPrec
            | LPAREN RPAREN
            ;

/*some exp may no value*/
valExp      : lvaule
            | constant
            | callExp
            | LPAREN exp SEMICOLON exp expSeq RPAREN
            | opExp
            | recordExp
            | arrayExp
            | letExp
            | ifThenElseExp
            ;

lvaule      : ID
            | lvaule DOT ID
            | lvaule LBRACK valExp RBRACK
            ;

constant    : NIL
            | INT
            | STRING
            ;

callExp     : ID LPAREN RPAREN
            | ID LPAREN paramList RPAREN
            ;

/* valExp{, valExp} (at least 1 valExp) */
paramList   : valExp
            | valExp COMMA paramList

/*() included in parentheses*/
/*(exp;exp{;exp}) (more than 2 exp)*/
expSeq      : /*empty*/
            | SEMICOLON exp expSeq

opExp       : MINUS valExp        
            | valExp AND    valExp
            | valExp OR     valExp
            | valExp GT     valExp
            | valExp GE     valExp
            | valExp LT     valExp
            | valExp LE     valExp
            | valExp EQ     valExp
            | valExp NEQ    valExp
            | valExp PLUS   valExp
            | valExp MINUS  valExp
            | valExp TIMES  valExp
            | valExp DIVIDE valExp
            ;

recordExp   : /*typeid*/ ID LBRACE RBRACE
            | /*typeid*/ ID LBRACE fieldList RBRACE
            ;

fieldList   : ID ASSIGN valExp
            | ID ASSIGN valExp COMMA fieldList
            ;

arrayExp    : /*typeid*/ ID LBRACK valExp RBRACK OF valExp    %prec lowPrec
            ;

letExp      : LET IN END
            | LET IN exp expList END
            | LET decs IN END
            | LET decs IN exp expList END
            ;

decs        : dec
            | dec decs
            ;

dec         : typeDec
            | varDec
            | funcDec
            ;

typeDec     : TYPE /*typeid*/ ID ASSIGN ty
            ;

ty          : /*typeid*/ ID
            | LBRACE RBRACE
            | LBRACE ID COLON /*typeid*/ ID fieldDecList RBRACE
            | ARRAY OF /*typeid*/ ID
            ;

fieldDecList: /*empty*/
            | COMMA ID COLON /*typeid*/ ID fieldDecList
            ;

varDec      : VAR ID ASSIGN valExp
            | VAR ID COLON /*typeid*/ ID ASSIGN valExp
            ;

funcDec     : FUNCTION ID LPAREN RPAREN EQ exp
            | FUNCTION ID LPAREN ID COLON /*typeid*/ ID paramDecList RPAREN EQ exp
            | FUNCTION ID LPAREN RPAREN COLON /*typeid*/ ID EQ valExp
            | FUNCTION ID LPAREN ID COLON /*typeid*/ ID paramDecList RPAREN COLON /*typeid*/ ID EQ valExp
            ;

paramDecList: /*empty*/
            | COMMA ID COLON /*typeid*/ ID paramList
            ;

expList     : /*empty*/
            | SEMICOLON exp expList
            ;

ifThenElseExp:IF valExp THEN valExp ELSE valExp %prec ELSE
            ;

/*Absolutely no value*/
stm         : assignStm
            | ifThenStm
            | whileStm
            | BREAK
            | forStm
            ;

assignStm   : lvaule ASSIGN valExp
            ;

ifThenStm   : IF valExp THEN valExp %prec IFTHEN
            ;

whileStm    : WHILE valExp DO exp /*produce no value exp*/
            ;

forStm      : FOR ID ASSIGN valExp TO valExp DO exp /*produce no value exp*/
            ;
